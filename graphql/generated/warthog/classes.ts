// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

import * as BN from "bn.js";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from '@subsquid/warthog';

import { DiscountLevel } from "../modules/contract-bill-report/contract-bill-report.model";
import { CertificationType } from "../modules/farm/farm.model";
import { ContractState } from "../modules/name-contract/name-contract.model";

// @ts-ignore
import { HistoricalBalance } from "../modules/historical-balance/historical-balance.model";
// @ts-ignore
import { Account } from "../modules/account/account.model";
// @ts-ignore
import { BurnTransaction } from "../modules/burn-transaction/burn-transaction.model";
// @ts-ignore
import { City } from "../modules/city/city.model";
// @ts-ignore
import { Consumption } from "../modules/consumption/consumption.model";
// @ts-ignore
import { ContractBillReport } from "../modules/contract-bill-report/contract-bill-report.model";
// @ts-ignore
import { Country } from "../modules/country/country.model";
// @ts-ignore
import { Twin } from "../modules/twin/twin.model";
// @ts-ignore
import { EntityProof } from "../modules/entity-proof/entity-proof.model";
// @ts-ignore
import { Entity } from "../modules/entity/entity.model";
// @ts-ignore
import { PublicIp } from "../modules/public-ip/public-ip.model";
// @ts-ignore
import { Farm } from "../modules/farm/farm.model";
// @ts-ignore
import { FarmingPolicy } from "../modules/farming-policy/farming-policy.model";
// @ts-ignore
import { Location } from "../modules/location/location.model";
// @ts-ignore
import { Policy } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { PublicConfig } from "../modules/jsonfields/jsonfields.model";
// @ts-ignore
import { Node } from "../modules/node/node.model";
// @ts-ignore
import { Interfaces } from "../modules/interfaces/interfaces.model";
// @ts-ignore
import { MintTransaction } from "../modules/mint-transaction/mint-transaction.model";
// @ts-ignore
import { NameContract } from "../modules/name-contract/name-contract.model";
// @ts-ignore
import { NodeContract } from "../modules/node-contract/node-contract.model";
// @ts-ignore
import { PricingPolicy } from "../modules/pricing-policy/pricing-policy.model";
// @ts-ignore
import { RefundTransaction } from "../modules/refund-transaction/refund-transaction.model";
// @ts-ignore
import { UptimeEvent } from "../modules/uptime-event/uptime-event.model";

export enum HistoricalBalanceOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  account_ASC = "account_ASC",
  account_DESC = "account_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",
}

registerEnumType(HistoricalBalanceOrderByEnum, {
  name: "HistoricalBalanceOrderByInput",
});

@TypeGraphQLInputType()
export class HistoricalBalanceWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  timestamp_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  timestamp_in?: string[];

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  account?: AccountWhereInput;

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  AND?: [HistoricalBalanceWhereInput];

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  OR?: [HistoricalBalanceWhereInput];
}

@TypeGraphQLInputType()
export class HistoricalBalanceWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class HistoricalBalanceCreateInput {
  @TypeGraphQLField(() => ID)
  account!: string;

  @TypeGraphQLField()
  balance!: string;

  @TypeGraphQLField()
  timestamp!: string;
}

@TypeGraphQLInputType()
export class HistoricalBalanceUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  account?: string;

  @TypeGraphQLField({ nullable: true })
  balance?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp?: string;
}

@ArgsType()
export class HistoricalBalanceWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  where?: HistoricalBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalBalanceOrderByEnum, { nullable: true })
  orderBy?: HistoricalBalanceOrderByEnum[];
}

@ArgsType()
export class HistoricalBalanceCreateManyArgs {
  @TypeGraphQLField(() => [HistoricalBalanceCreateInput])
  data!: HistoricalBalanceCreateInput[];
}

@ArgsType()
export class HistoricalBalanceUpdateArgs {
  @TypeGraphQLField() data!: HistoricalBalanceUpdateInput;
  @TypeGraphQLField() where!: HistoricalBalanceWhereUniqueInput;
}

export enum AccountOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  wallet_ASC = "wallet_ASC",
  wallet_DESC = "wallet_DESC",

  balance_ASC = "balance_ASC",
  balance_DESC = "balance_DESC",
}

registerEnumType(AccountOrderByEnum, {
  name: "AccountOrderByInput",
});

@TypeGraphQLInputType()
export class AccountWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  wallet_eq?: string;

  @TypeGraphQLField({ nullable: true })
  wallet_contains?: string;

  @TypeGraphQLField({ nullable: true })
  wallet_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  wallet_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  wallet_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  balance_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  balance_in?: string[];

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  historicalBalances_none?: HistoricalBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  historicalBalances_some?: HistoricalBalanceWhereInput;

  @TypeGraphQLField(() => HistoricalBalanceWhereInput, { nullable: true })
  historicalBalances_every?: HistoricalBalanceWhereInput;

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  AND?: [AccountWhereInput];

  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  OR?: [AccountWhereInput];
}

@TypeGraphQLInputType()
export class AccountWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class AccountCreateInput {
  @TypeGraphQLField()
  wallet!: string;

  @TypeGraphQLField()
  balance!: string;
}

@TypeGraphQLInputType()
export class AccountUpdateInput {
  @TypeGraphQLField({ nullable: true })
  wallet?: string;

  @TypeGraphQLField({ nullable: true })
  balance?: string;
}

@ArgsType()
export class AccountWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => AccountWhereInput, { nullable: true })
  where?: AccountWhereInput;

  @TypeGraphQLField(() => AccountOrderByEnum, { nullable: true })
  orderBy?: AccountOrderByEnum[];
}

@ArgsType()
export class AccountCreateManyArgs {
  @TypeGraphQLField(() => [AccountCreateInput])
  data!: AccountCreateInput[];
}

@ArgsType()
export class AccountUpdateArgs {
  @TypeGraphQLField() data!: AccountUpdateInput;
  @TypeGraphQLField() where!: AccountWhereUniqueInput;
}

export enum BurnTransactionOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  block_ASC = "block_ASC",
  block_DESC = "block_DESC",

  amount_ASC = "amount_ASC",
  amount_DESC = "amount_DESC",

  target_ASC = "target_ASC",
  target_DESC = "target_DESC",
}

registerEnumType(BurnTransactionOrderByEnum, {
  name: "BurnTransactionOrderByInput",
});

@TypeGraphQLInputType()
export class BurnTransactionWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  block_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  block_in?: number[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amount_in?: string[];

  @TypeGraphQLField({ nullable: true })
  target_eq?: string;

  @TypeGraphQLField({ nullable: true })
  target_contains?: string;

  @TypeGraphQLField({ nullable: true })
  target_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  target_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  target_in?: string[];

  @TypeGraphQLField(() => BurnTransactionWhereInput, { nullable: true })
  AND?: [BurnTransactionWhereInput];

  @TypeGraphQLField(() => BurnTransactionWhereInput, { nullable: true })
  OR?: [BurnTransactionWhereInput];
}

@TypeGraphQLInputType()
export class BurnTransactionWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class BurnTransactionCreateInput {
  @TypeGraphQLField()
  block!: number;

  @TypeGraphQLField()
  amount!: string;

  @TypeGraphQLField()
  target!: string;
}

@TypeGraphQLInputType()
export class BurnTransactionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  block?: number;

  @TypeGraphQLField({ nullable: true })
  amount?: string;

  @TypeGraphQLField({ nullable: true })
  target?: string;
}

@ArgsType()
export class BurnTransactionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => BurnTransactionWhereInput, { nullable: true })
  where?: BurnTransactionWhereInput;

  @TypeGraphQLField(() => BurnTransactionOrderByEnum, { nullable: true })
  orderBy?: BurnTransactionOrderByEnum[];
}

@ArgsType()
export class BurnTransactionCreateManyArgs {
  @TypeGraphQLField(() => [BurnTransactionCreateInput])
  data!: BurnTransactionCreateInput[];
}

@ArgsType()
export class BurnTransactionUpdateArgs {
  @TypeGraphQLField() data!: BurnTransactionUpdateInput;
  @TypeGraphQLField() where!: BurnTransactionWhereUniqueInput;
}

export enum CityOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  cityId_ASC = "cityId_ASC",
  cityId_DESC = "cityId_DESC",

  countryId_ASC = "countryId_ASC",
  countryId_DESC = "countryId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",
}

registerEnumType(CityOrderByEnum, {
  name: "CityOrderByInput",
});

@TypeGraphQLInputType()
export class CityWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cityId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  cityId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  countryId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField(() => CityWhereInput, { nullable: true })
  AND?: [CityWhereInput];

  @TypeGraphQLField(() => CityWhereInput, { nullable: true })
  OR?: [CityWhereInput];
}

@TypeGraphQLInputType()
export class CityWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CityCreateInput {
  @TypeGraphQLField()
  cityId!: number;

  @TypeGraphQLField()
  countryId!: number;

  @TypeGraphQLField()
  name!: string;
}

@TypeGraphQLInputType()
export class CityUpdateInput {
  @TypeGraphQLField({ nullable: true })
  cityId?: number;

  @TypeGraphQLField({ nullable: true })
  countryId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;
}

@ArgsType()
export class CityWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CityWhereInput, { nullable: true })
  where?: CityWhereInput;

  @TypeGraphQLField(() => CityOrderByEnum, { nullable: true })
  orderBy?: CityOrderByEnum[];
}

@ArgsType()
export class CityCreateManyArgs {
  @TypeGraphQLField(() => [CityCreateInput])
  data!: CityCreateInput[];
}

@ArgsType()
export class CityUpdateArgs {
  @TypeGraphQLField() data!: CityUpdateInput;
  @TypeGraphQLField() where!: CityWhereUniqueInput;
}

export enum ConsumptionOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  contractId_ASC = "contractId_ASC",
  contractId_DESC = "contractId_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",

  cru_ASC = "cru_ASC",
  cru_DESC = "cru_DESC",

  sru_ASC = "sru_ASC",
  sru_DESC = "sru_DESC",

  hru_ASC = "hru_ASC",
  hru_DESC = "hru_DESC",

  mru_ASC = "mru_ASC",
  mru_DESC = "mru_DESC",

  nru_ASC = "nru_ASC",
  nru_DESC = "nru_DESC",
}

registerEnumType(ConsumptionOrderByEnum, {
  name: "ConsumptionOrderByInput",
});

@TypeGraphQLInputType()
export class ConsumptionWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  contractId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  timestamp_in?: number[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  cru_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  sru_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  hru_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  mru_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  nru_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  nru_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  nru_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  nru_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  nru_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  nru_in?: string[];

  @TypeGraphQLField(() => ConsumptionWhereInput, { nullable: true })
  AND?: [ConsumptionWhereInput];

  @TypeGraphQLField(() => ConsumptionWhereInput, { nullable: true })
  OR?: [ConsumptionWhereInput];
}

@TypeGraphQLInputType()
export class ConsumptionWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class ConsumptionCreateInput {
  @TypeGraphQLField()
  contractId!: number;

  @TypeGraphQLField()
  timestamp!: number;

  @TypeGraphQLField({ nullable: true })
  cru?: string;

  @TypeGraphQLField({ nullable: true })
  sru?: string;

  @TypeGraphQLField({ nullable: true })
  hru?: string;

  @TypeGraphQLField({ nullable: true })
  mru?: string;

  @TypeGraphQLField({ nullable: true })
  nru?: string;
}

@TypeGraphQLInputType()
export class ConsumptionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  contractId?: number;

  @TypeGraphQLField({ nullable: true })
  timestamp?: number;

  @TypeGraphQLField({ nullable: true })
  cru?: string;

  @TypeGraphQLField({ nullable: true })
  sru?: string;

  @TypeGraphQLField({ nullable: true })
  hru?: string;

  @TypeGraphQLField({ nullable: true })
  mru?: string;

  @TypeGraphQLField({ nullable: true })
  nru?: string;
}

@ArgsType()
export class ConsumptionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => ConsumptionWhereInput, { nullable: true })
  where?: ConsumptionWhereInput;

  @TypeGraphQLField(() => ConsumptionOrderByEnum, { nullable: true })
  orderBy?: ConsumptionOrderByEnum[];
}

@ArgsType()
export class ConsumptionCreateManyArgs {
  @TypeGraphQLField(() => [ConsumptionCreateInput])
  data!: ConsumptionCreateInput[];
}

@ArgsType()
export class ConsumptionUpdateArgs {
  @TypeGraphQLField() data!: ConsumptionUpdateInput;
  @TypeGraphQLField() where!: ConsumptionWhereUniqueInput;
}

export enum ContractBillReportOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  contractId_ASC = "contractId_ASC",
  contractId_DESC = "contractId_DESC",

  discountReceived_ASC = "discountReceived_ASC",
  discountReceived_DESC = "discountReceived_DESC",

  amountBilled_ASC = "amountBilled_ASC",
  amountBilled_DESC = "amountBilled_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",
}

registerEnumType(ContractBillReportOrderByEnum, {
  name: "ContractBillReportOrderByInput",
});

@TypeGraphQLInputType()
export class ContractBillReportWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  contractId_in?: number[];

  @TypeGraphQLField(() => DiscountLevel, { nullable: true })
  discountReceived_eq?: DiscountLevel;

  @TypeGraphQLField(() => [DiscountLevel], { nullable: true })
  discountReceived_in?: DiscountLevel[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountBilled_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountBilled_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountBilled_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountBilled_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amountBilled_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amountBilled_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  timestamp_in?: number[];

  @TypeGraphQLField(() => ContractBillReportWhereInput, { nullable: true })
  AND?: [ContractBillReportWhereInput];

  @TypeGraphQLField(() => ContractBillReportWhereInput, { nullable: true })
  OR?: [ContractBillReportWhereInput];
}

@TypeGraphQLInputType()
export class ContractBillReportWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class ContractBillReportCreateInput {
  @TypeGraphQLField()
  contractId!: number;

  @TypeGraphQLField(() => DiscountLevel)
  discountReceived!: DiscountLevel;

  @TypeGraphQLField()
  amountBilled!: string;

  @TypeGraphQLField()
  timestamp!: number;
}

@TypeGraphQLInputType()
export class ContractBillReportUpdateInput {
  @TypeGraphQLField({ nullable: true })
  contractId?: number;

  @TypeGraphQLField(() => DiscountLevel, { nullable: true })
  discountReceived?: DiscountLevel;

  @TypeGraphQLField({ nullable: true })
  amountBilled?: string;

  @TypeGraphQLField({ nullable: true })
  timestamp?: number;
}

@ArgsType()
export class ContractBillReportWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => ContractBillReportWhereInput, { nullable: true })
  where?: ContractBillReportWhereInput;

  @TypeGraphQLField(() => ContractBillReportOrderByEnum, { nullable: true })
  orderBy?: ContractBillReportOrderByEnum[];
}

@ArgsType()
export class ContractBillReportCreateManyArgs {
  @TypeGraphQLField(() => [ContractBillReportCreateInput])
  data!: ContractBillReportCreateInput[];
}

@ArgsType()
export class ContractBillReportUpdateArgs {
  @TypeGraphQLField() data!: ContractBillReportUpdateInput;
  @TypeGraphQLField() where!: ContractBillReportWhereUniqueInput;
}

export enum CountryOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  countryId_ASC = "countryId_ASC",
  countryId_DESC = "countryId_DESC",

  code_ASC = "code_ASC",
  code_DESC = "code_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  region_ASC = "region_ASC",
  region_DESC = "region_DESC",

  subregion_ASC = "subregion_ASC",
  subregion_DESC = "subregion_DESC",

  lat_ASC = "lat_ASC",
  lat_DESC = "lat_DESC",

  long_ASC = "long_ASC",
  long_DESC = "long_DESC",
}

registerEnumType(CountryOrderByEnum, {
  name: "CountryOrderByInput",
});

@TypeGraphQLInputType()
export class CountryWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  countryId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  countryId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  code_eq?: string;

  @TypeGraphQLField({ nullable: true })
  code_contains?: string;

  @TypeGraphQLField({ nullable: true })
  code_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  code_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  code_in?: string[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  region_eq?: string;

  @TypeGraphQLField({ nullable: true })
  region_contains?: string;

  @TypeGraphQLField({ nullable: true })
  region_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  region_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  region_in?: string[];

  @TypeGraphQLField({ nullable: true })
  subregion_eq?: string;

  @TypeGraphQLField({ nullable: true })
  subregion_contains?: string;

  @TypeGraphQLField({ nullable: true })
  subregion_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  subregion_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  subregion_in?: string[];

  @TypeGraphQLField({ nullable: true })
  lat_eq?: string;

  @TypeGraphQLField({ nullable: true })
  lat_contains?: string;

  @TypeGraphQLField({ nullable: true })
  lat_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  lat_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  lat_in?: string[];

  @TypeGraphQLField({ nullable: true })
  long_eq?: string;

  @TypeGraphQLField({ nullable: true })
  long_contains?: string;

  @TypeGraphQLField({ nullable: true })
  long_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  long_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  long_in?: string[];

  @TypeGraphQLField(() => CountryWhereInput, { nullable: true })
  AND?: [CountryWhereInput];

  @TypeGraphQLField(() => CountryWhereInput, { nullable: true })
  OR?: [CountryWhereInput];
}

@TypeGraphQLInputType()
export class CountryWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CountryCreateInput {
  @TypeGraphQLField()
  countryId!: number;

  @TypeGraphQLField()
  code!: string;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  region!: string;

  @TypeGraphQLField()
  subregion!: string;

  @TypeGraphQLField({ nullable: true })
  lat?: string;

  @TypeGraphQLField({ nullable: true })
  long?: string;
}

@TypeGraphQLInputType()
export class CountryUpdateInput {
  @TypeGraphQLField({ nullable: true })
  countryId?: number;

  @TypeGraphQLField({ nullable: true })
  code?: string;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  region?: string;

  @TypeGraphQLField({ nullable: true })
  subregion?: string;

  @TypeGraphQLField({ nullable: true })
  lat?: string;

  @TypeGraphQLField({ nullable: true })
  long?: string;
}

@ArgsType()
export class CountryWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CountryWhereInput, { nullable: true })
  where?: CountryWhereInput;

  @TypeGraphQLField(() => CountryOrderByEnum, { nullable: true })
  orderBy?: CountryOrderByEnum[];
}

@ArgsType()
export class CountryCreateManyArgs {
  @TypeGraphQLField(() => [CountryCreateInput])
  data!: CountryCreateInput[];
}

@ArgsType()
export class CountryUpdateArgs {
  @TypeGraphQLField() data!: CountryUpdateInput;
  @TypeGraphQLField() where!: CountryWhereUniqueInput;
}

export enum TwinOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  twinId_ASC = "twinId_ASC",
  twinId_DESC = "twinId_DESC",

  accountId_ASC = "accountId_ASC",
  accountId_DESC = "accountId_DESC",

  ip_ASC = "ip_ASC",
  ip_DESC = "ip_DESC",
}

registerEnumType(TwinOrderByEnum, {
  name: "TwinOrderByInput",
});

@TypeGraphQLInputType()
export class TwinWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  twinId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  accountId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  accountId_contains?: string;

  @TypeGraphQLField({ nullable: true })
  accountId_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  accountId_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  accountId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  ip_eq?: string;

  @TypeGraphQLField({ nullable: true })
  ip_contains?: string;

  @TypeGraphQLField({ nullable: true })
  ip_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  ip_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ip_in?: string[];

  @TypeGraphQLField(() => EntityProofWhereInput, { nullable: true })
  entityprooftwinRel_none?: EntityProofWhereInput;

  @TypeGraphQLField(() => EntityProofWhereInput, { nullable: true })
  entityprooftwinRel_some?: EntityProofWhereInput;

  @TypeGraphQLField(() => EntityProofWhereInput, { nullable: true })
  entityprooftwinRel_every?: EntityProofWhereInput;

  @TypeGraphQLField(() => TwinWhereInput, { nullable: true })
  AND?: [TwinWhereInput];

  @TypeGraphQLField(() => TwinWhereInput, { nullable: true })
  OR?: [TwinWhereInput];
}

@TypeGraphQLInputType()
export class TwinWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class TwinCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  twinId!: number;

  @TypeGraphQLField()
  accountId!: string;

  @TypeGraphQLField()
  ip!: string;
}

@TypeGraphQLInputType()
export class TwinUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  twinId?: number;

  @TypeGraphQLField({ nullable: true })
  accountId?: string;

  @TypeGraphQLField({ nullable: true })
  ip?: string;
}

@ArgsType()
export class TwinWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => TwinWhereInput, { nullable: true })
  where?: TwinWhereInput;

  @TypeGraphQLField(() => TwinOrderByEnum, { nullable: true })
  orderBy?: TwinOrderByEnum[];
}

@ArgsType()
export class TwinCreateManyArgs {
  @TypeGraphQLField(() => [TwinCreateInput])
  data!: TwinCreateInput[];
}

@ArgsType()
export class TwinUpdateArgs {
  @TypeGraphQLField() data!: TwinUpdateInput;
  @TypeGraphQLField() where!: TwinWhereUniqueInput;
}

export enum EntityProofOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  entityId_ASC = "entityId_ASC",
  entityId_DESC = "entityId_DESC",

  signature_ASC = "signature_ASC",
  signature_DESC = "signature_DESC",

  twinRel_ASC = "twinRel_ASC",
  twinRel_DESC = "twinRel_DESC",
}

registerEnumType(EntityProofOrderByEnum, {
  name: "EntityProofOrderByInput",
});

@TypeGraphQLInputType()
export class EntityProofWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  entityId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  signature_eq?: string;

  @TypeGraphQLField({ nullable: true })
  signature_contains?: string;

  @TypeGraphQLField({ nullable: true })
  signature_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  signature_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  signature_in?: string[];

  @TypeGraphQLField(() => TwinWhereInput, { nullable: true })
  twinRel?: TwinWhereInput;

  @TypeGraphQLField(() => EntityProofWhereInput, { nullable: true })
  AND?: [EntityProofWhereInput];

  @TypeGraphQLField(() => EntityProofWhereInput, { nullable: true })
  OR?: [EntityProofWhereInput];
}

@TypeGraphQLInputType()
export class EntityProofWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class EntityProofCreateInput {
  @TypeGraphQLField()
  entityId!: number;

  @TypeGraphQLField()
  signature!: string;

  @TypeGraphQLField(() => ID)
  twinRel!: string;
}

@TypeGraphQLInputType()
export class EntityProofUpdateInput {
  @TypeGraphQLField({ nullable: true })
  entityId?: number;

  @TypeGraphQLField({ nullable: true })
  signature?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  twinRel?: string;
}

@ArgsType()
export class EntityProofWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => EntityProofWhereInput, { nullable: true })
  where?: EntityProofWhereInput;

  @TypeGraphQLField(() => EntityProofOrderByEnum, { nullable: true })
  orderBy?: EntityProofOrderByEnum[];
}

@ArgsType()
export class EntityProofCreateManyArgs {
  @TypeGraphQLField(() => [EntityProofCreateInput])
  data!: EntityProofCreateInput[];
}

@ArgsType()
export class EntityProofUpdateArgs {
  @TypeGraphQLField() data!: EntityProofUpdateInput;
  @TypeGraphQLField() where!: EntityProofWhereUniqueInput;
}

export enum EntityOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  entityId_ASC = "entityId_ASC",
  entityId_DESC = "entityId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  country_ASC = "country_ASC",
  country_DESC = "country_DESC",

  city_ASC = "city_ASC",
  city_DESC = "city_DESC",

  accountId_ASC = "accountId_ASC",
  accountId_DESC = "accountId_DESC",
}

registerEnumType(EntityOrderByEnum, {
  name: "EntityOrderByInput",
});

@TypeGraphQLInputType()
export class EntityWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  entityId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  entityId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  country_eq?: string;

  @TypeGraphQLField({ nullable: true })
  country_contains?: string;

  @TypeGraphQLField({ nullable: true })
  country_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  country_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  country_in?: string[];

  @TypeGraphQLField({ nullable: true })
  city_eq?: string;

  @TypeGraphQLField({ nullable: true })
  city_contains?: string;

  @TypeGraphQLField({ nullable: true })
  city_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  city_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  city_in?: string[];

  @TypeGraphQLField({ nullable: true })
  accountId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  accountId_contains?: string;

  @TypeGraphQLField({ nullable: true })
  accountId_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  accountId_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  accountId_in?: string[];

  @TypeGraphQLField(() => EntityWhereInput, { nullable: true })
  AND?: [EntityWhereInput];

  @TypeGraphQLField(() => EntityWhereInput, { nullable: true })
  OR?: [EntityWhereInput];
}

@TypeGraphQLInputType()
export class EntityWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class EntityCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  entityId!: number;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField({ nullable: true })
  country?: string;

  @TypeGraphQLField({ nullable: true })
  city?: string;

  @TypeGraphQLField()
  accountId!: string;
}

@TypeGraphQLInputType()
export class EntityUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  entityId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  country?: string;

  @TypeGraphQLField({ nullable: true })
  city?: string;

  @TypeGraphQLField({ nullable: true })
  accountId?: string;
}

@ArgsType()
export class EntityWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => EntityWhereInput, { nullable: true })
  where?: EntityWhereInput;

  @TypeGraphQLField(() => EntityOrderByEnum, { nullable: true })
  orderBy?: EntityOrderByEnum[];
}

@ArgsType()
export class EntityCreateManyArgs {
  @TypeGraphQLField(() => [EntityCreateInput])
  data!: EntityCreateInput[];
}

@ArgsType()
export class EntityUpdateArgs {
  @TypeGraphQLField() data!: EntityUpdateInput;
  @TypeGraphQLField() where!: EntityWhereUniqueInput;
}

export enum PublicIpOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  farm_ASC = "farm_ASC",
  farm_DESC = "farm_DESC",

  gateway_ASC = "gateway_ASC",
  gateway_DESC = "gateway_DESC",

  ip_ASC = "ip_ASC",
  ip_DESC = "ip_DESC",

  contractId_ASC = "contractId_ASC",
  contractId_DESC = "contractId_DESC",
}

registerEnumType(PublicIpOrderByEnum, {
  name: "PublicIpOrderByInput",
});

@TypeGraphQLInputType()
export class PublicIpWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  gateway_eq?: string;

  @TypeGraphQLField({ nullable: true })
  gateway_contains?: string;

  @TypeGraphQLField({ nullable: true })
  gateway_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  gateway_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  gateway_in?: string[];

  @TypeGraphQLField({ nullable: true })
  ip_eq?: string;

  @TypeGraphQLField({ nullable: true })
  ip_contains?: string;

  @TypeGraphQLField({ nullable: true })
  ip_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  ip_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ip_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  contractId_in?: number[];

  @TypeGraphQLField(() => FarmWhereInput, { nullable: true })
  farm?: FarmWhereInput;

  @TypeGraphQLField(() => PublicIpWhereInput, { nullable: true })
  AND?: [PublicIpWhereInput];

  @TypeGraphQLField(() => PublicIpWhereInput, { nullable: true })
  OR?: [PublicIpWhereInput];
}

@TypeGraphQLInputType()
export class PublicIpWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PublicIpCreateInput {
  @TypeGraphQLField(() => ID)
  farm!: string;

  @TypeGraphQLField()
  gateway!: string;

  @TypeGraphQLField()
  ip!: string;

  @TypeGraphQLField()
  contractId!: number;
}

@TypeGraphQLInputType()
export class PublicIpUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  farm?: string;

  @TypeGraphQLField({ nullable: true })
  gateway?: string;

  @TypeGraphQLField({ nullable: true })
  ip?: string;

  @TypeGraphQLField({ nullable: true })
  contractId?: number;
}

@ArgsType()
export class PublicIpWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PublicIpWhereInput, { nullable: true })
  where?: PublicIpWhereInput;

  @TypeGraphQLField(() => PublicIpOrderByEnum, { nullable: true })
  orderBy?: PublicIpOrderByEnum[];
}

@ArgsType()
export class PublicIpCreateManyArgs {
  @TypeGraphQLField(() => [PublicIpCreateInput])
  data!: PublicIpCreateInput[];
}

@ArgsType()
export class PublicIpUpdateArgs {
  @TypeGraphQLField() data!: PublicIpUpdateInput;
  @TypeGraphQLField() where!: PublicIpWhereUniqueInput;
}

export enum FarmOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  farmId_ASC = "farmId_ASC",
  farmId_DESC = "farmId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  twinId_ASC = "twinId_ASC",
  twinId_DESC = "twinId_DESC",

  pricingPolicyId_ASC = "pricingPolicyId_ASC",
  pricingPolicyId_DESC = "pricingPolicyId_DESC",

  certificationType_ASC = "certificationType_ASC",
  certificationType_DESC = "certificationType_DESC",

  stellarAddress_ASC = "stellarAddress_ASC",
  stellarAddress_DESC = "stellarAddress_DESC",
}

registerEnumType(FarmOrderByEnum, {
  name: "FarmOrderByInput",
});

@TypeGraphQLInputType()
export class FarmWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  farmId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  twinId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  pricingPolicyId_in?: number[];

  @TypeGraphQLField(() => CertificationType, { nullable: true })
  certificationType_eq?: CertificationType;

  @TypeGraphQLField(() => [CertificationType], { nullable: true })
  certificationType_in?: CertificationType[];

  @TypeGraphQLField({ nullable: true })
  stellarAddress_eq?: string;

  @TypeGraphQLField({ nullable: true })
  stellarAddress_contains?: string;

  @TypeGraphQLField({ nullable: true })
  stellarAddress_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  stellarAddress_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  stellarAddress_in?: string[];

  @TypeGraphQLField(() => PublicIpWhereInput, { nullable: true })
  publicIPs_none?: PublicIpWhereInput;

  @TypeGraphQLField(() => PublicIpWhereInput, { nullable: true })
  publicIPs_some?: PublicIpWhereInput;

  @TypeGraphQLField(() => PublicIpWhereInput, { nullable: true })
  publicIPs_every?: PublicIpWhereInput;

  @TypeGraphQLField(() => FarmWhereInput, { nullable: true })
  AND?: [FarmWhereInput];

  @TypeGraphQLField(() => FarmWhereInput, { nullable: true })
  OR?: [FarmWhereInput];
}

@TypeGraphQLInputType()
export class FarmWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class FarmCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  farmId!: number;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  twinId!: number;

  @TypeGraphQLField()
  pricingPolicyId!: number;

  @TypeGraphQLField(() => CertificationType)
  certificationType!: CertificationType;

  @TypeGraphQLField({ nullable: true })
  stellarAddress?: string;
}

@TypeGraphQLInputType()
export class FarmUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  farmId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  twinId?: number;

  @TypeGraphQLField({ nullable: true })
  pricingPolicyId?: number;

  @TypeGraphQLField(() => CertificationType, { nullable: true })
  certificationType?: CertificationType;

  @TypeGraphQLField({ nullable: true })
  stellarAddress?: string;
}

@ArgsType()
export class FarmWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => FarmWhereInput, { nullable: true })
  where?: FarmWhereInput;

  @TypeGraphQLField(() => FarmOrderByEnum, { nullable: true })
  orderBy?: FarmOrderByEnum[];
}

@ArgsType()
export class FarmCreateManyArgs {
  @TypeGraphQLField(() => [FarmCreateInput])
  data!: FarmCreateInput[];
}

@ArgsType()
export class FarmUpdateArgs {
  @TypeGraphQLField() data!: FarmUpdateInput;
  @TypeGraphQLField() where!: FarmWhereUniqueInput;
}

export enum FarmingPolicyOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  farmingPolicyId_ASC = "farmingPolicyId_ASC",
  farmingPolicyId_DESC = "farmingPolicyId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  cu_ASC = "cu_ASC",
  cu_DESC = "cu_DESC",

  su_ASC = "su_ASC",
  su_DESC = "su_DESC",

  nu_ASC = "nu_ASC",
  nu_DESC = "nu_DESC",

  ipv4_ASC = "ipv4_ASC",
  ipv4_DESC = "ipv4_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",

  certificationType_ASC = "certificationType_ASC",
  certificationType_DESC = "certificationType_DESC",
}

registerEnumType(FarmingPolicyOrderByEnum, {
  name: "FarmingPolicyOrderByInput",
});

@TypeGraphQLInputType()
export class FarmingPolicyWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  farmingPolicyId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  cu_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  cu_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  su_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  su_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  su_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  su_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  su_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  su_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nu_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  nu_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  ipv4_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  ipv4_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  ipv4_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  ipv4_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  ipv4_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  ipv4_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  timestamp_in?: number[];

  @TypeGraphQLField(() => CertificationType, { nullable: true })
  certificationType_eq?: CertificationType;

  @TypeGraphQLField(() => [CertificationType], { nullable: true })
  certificationType_in?: CertificationType[];

  @TypeGraphQLField(() => FarmingPolicyWhereInput, { nullable: true })
  AND?: [FarmingPolicyWhereInput];

  @TypeGraphQLField(() => FarmingPolicyWhereInput, { nullable: true })
  OR?: [FarmingPolicyWhereInput];
}

@TypeGraphQLInputType()
export class FarmingPolicyWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class FarmingPolicyCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  farmingPolicyId!: number;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  cu!: number;

  @TypeGraphQLField()
  su!: number;

  @TypeGraphQLField()
  nu!: number;

  @TypeGraphQLField()
  ipv4!: number;

  @TypeGraphQLField()
  timestamp!: number;

  @TypeGraphQLField(() => CertificationType)
  certificationType!: CertificationType;
}

@TypeGraphQLInputType()
export class FarmingPolicyUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  farmingPolicyId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  cu?: number;

  @TypeGraphQLField({ nullable: true })
  su?: number;

  @TypeGraphQLField({ nullable: true })
  nu?: number;

  @TypeGraphQLField({ nullable: true })
  ipv4?: number;

  @TypeGraphQLField({ nullable: true })
  timestamp?: number;

  @TypeGraphQLField(() => CertificationType, { nullable: true })
  certificationType?: CertificationType;
}

@ArgsType()
export class FarmingPolicyWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => FarmingPolicyWhereInput, { nullable: true })
  where?: FarmingPolicyWhereInput;

  @TypeGraphQLField(() => FarmingPolicyOrderByEnum, { nullable: true })
  orderBy?: FarmingPolicyOrderByEnum[];
}

@ArgsType()
export class FarmingPolicyCreateManyArgs {
  @TypeGraphQLField(() => [FarmingPolicyCreateInput])
  data!: FarmingPolicyCreateInput[];
}

@ArgsType()
export class FarmingPolicyUpdateArgs {
  @TypeGraphQLField() data!: FarmingPolicyUpdateInput;
  @TypeGraphQLField() where!: FarmingPolicyWhereUniqueInput;
}

export enum LocationOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  longitude_ASC = "longitude_ASC",
  longitude_DESC = "longitude_DESC",

  latitude_ASC = "latitude_ASC",
  latitude_DESC = "latitude_DESC",
}

registerEnumType(LocationOrderByEnum, {
  name: "LocationOrderByInput",
});

@TypeGraphQLInputType()
export class LocationWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  longitude_eq?: string;

  @TypeGraphQLField({ nullable: true })
  longitude_contains?: string;

  @TypeGraphQLField({ nullable: true })
  longitude_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  longitude_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  longitude_in?: string[];

  @TypeGraphQLField({ nullable: true })
  latitude_eq?: string;

  @TypeGraphQLField({ nullable: true })
  latitude_contains?: string;

  @TypeGraphQLField({ nullable: true })
  latitude_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  latitude_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  latitude_in?: string[];

  @TypeGraphQLField(() => NodeWhereInput, { nullable: true })
  nodelocation_none?: NodeWhereInput;

  @TypeGraphQLField(() => NodeWhereInput, { nullable: true })
  nodelocation_some?: NodeWhereInput;

  @TypeGraphQLField(() => NodeWhereInput, { nullable: true })
  nodelocation_every?: NodeWhereInput;

  @TypeGraphQLField(() => LocationWhereInput, { nullable: true })
  AND?: [LocationWhereInput];

  @TypeGraphQLField(() => LocationWhereInput, { nullable: true })
  OR?: [LocationWhereInput];
}

@TypeGraphQLInputType()
export class LocationWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class LocationCreateInput {
  @TypeGraphQLField()
  longitude!: string;

  @TypeGraphQLField()
  latitude!: string;
}

@TypeGraphQLInputType()
export class LocationUpdateInput {
  @TypeGraphQLField({ nullable: true })
  longitude?: string;

  @TypeGraphQLField({ nullable: true })
  latitude?: string;
}

@ArgsType()
export class LocationWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => LocationWhereInput, { nullable: true })
  where?: LocationWhereInput;

  @TypeGraphQLField(() => LocationOrderByEnum, { nullable: true })
  orderBy?: LocationOrderByEnum[];
}

@ArgsType()
export class LocationCreateManyArgs {
  @TypeGraphQLField(() => [LocationCreateInput])
  data!: LocationCreateInput[];
}

@ArgsType()
export class LocationUpdateArgs {
  @TypeGraphQLField() data!: LocationUpdateInput;
  @TypeGraphQLField() where!: LocationWhereUniqueInput;
}

export enum PolicyOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  value_ASC = "value_ASC",
  value_DESC = "value_DESC",

  unit_ASC = "unit_ASC",
  unit_DESC = "unit_DESC",
}

registerEnumType(PolicyOrderByEnum, {
  name: "PolicyOrderByInput",
});

@TypeGraphQLInputType()
export class PolicyWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  value_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  value_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  value_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  value_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  value_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  value_in?: number[];

  @TypeGraphQLField({ nullable: true })
  unit_eq?: string;

  @TypeGraphQLField({ nullable: true })
  unit_contains?: string;

  @TypeGraphQLField({ nullable: true })
  unit_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  unit_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  unit_in?: string[];

  @TypeGraphQLField(() => PolicyWhereInput, { nullable: true })
  AND?: [PolicyWhereInput];

  @TypeGraphQLField(() => PolicyWhereInput, { nullable: true })
  OR?: [PolicyWhereInput];
}

@TypeGraphQLInputType()
export class PolicyWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PolicyCreateInput {
  @TypeGraphQLField({ nullable: true })
  value?: number;

  @TypeGraphQLField({ nullable: true })
  unit?: string;
}

@TypeGraphQLInputType()
export class PolicyUpdateInput {
  @TypeGraphQLField({ nullable: true })
  value?: number;

  @TypeGraphQLField({ nullable: true })
  unit?: string;
}

@ArgsType()
export class PolicyWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PolicyWhereInput, { nullable: true })
  where?: PolicyWhereInput;

  @TypeGraphQLField(() => PolicyOrderByEnum, { nullable: true })
  orderBy?: PolicyOrderByEnum[];
}

@ArgsType()
export class PolicyCreateManyArgs {
  @TypeGraphQLField(() => [PolicyCreateInput])
  data!: PolicyCreateInput[];
}

@ArgsType()
export class PolicyUpdateArgs {
  @TypeGraphQLField() data!: PolicyUpdateInput;
  @TypeGraphQLField() where!: PolicyWhereUniqueInput;
}

export enum PublicConfigOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  ipv4_ASC = "ipv4_ASC",
  ipv4_DESC = "ipv4_DESC",

  ipv6_ASC = "ipv6_ASC",
  ipv6_DESC = "ipv6_DESC",

  gw4_ASC = "gw4_ASC",
  gw4_DESC = "gw4_DESC",

  gw6_ASC = "gw6_ASC",
  gw6_DESC = "gw6_DESC",

  domain_ASC = "domain_ASC",
  domain_DESC = "domain_DESC",
}

registerEnumType(PublicConfigOrderByEnum, {
  name: "PublicConfigOrderByInput",
});

@TypeGraphQLInputType()
export class PublicConfigWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  ipv4_eq?: string;

  @TypeGraphQLField({ nullable: true })
  ipv4_contains?: string;

  @TypeGraphQLField({ nullable: true })
  ipv4_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  ipv4_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ipv4_in?: string[];

  @TypeGraphQLField({ nullable: true })
  ipv6_eq?: string;

  @TypeGraphQLField({ nullable: true })
  ipv6_contains?: string;

  @TypeGraphQLField({ nullable: true })
  ipv6_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  ipv6_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ipv6_in?: string[];

  @TypeGraphQLField({ nullable: true })
  gw4_eq?: string;

  @TypeGraphQLField({ nullable: true })
  gw4_contains?: string;

  @TypeGraphQLField({ nullable: true })
  gw4_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  gw4_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  gw4_in?: string[];

  @TypeGraphQLField({ nullable: true })
  gw6_eq?: string;

  @TypeGraphQLField({ nullable: true })
  gw6_contains?: string;

  @TypeGraphQLField({ nullable: true })
  gw6_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  gw6_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  gw6_in?: string[];

  @TypeGraphQLField({ nullable: true })
  domain_eq?: string;

  @TypeGraphQLField({ nullable: true })
  domain_contains?: string;

  @TypeGraphQLField({ nullable: true })
  domain_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  domain_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  domain_in?: string[];

  @TypeGraphQLField(() => PublicConfigWhereInput, { nullable: true })
  AND?: [PublicConfigWhereInput];

  @TypeGraphQLField(() => PublicConfigWhereInput, { nullable: true })
  OR?: [PublicConfigWhereInput];
}

@TypeGraphQLInputType()
export class PublicConfigWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PublicConfigCreateInput {
  @TypeGraphQLField({ nullable: true })
  ipv4?: string;

  @TypeGraphQLField({ nullable: true })
  ipv6?: string;

  @TypeGraphQLField({ nullable: true })
  gw4?: string;

  @TypeGraphQLField({ nullable: true })
  gw6?: string;

  @TypeGraphQLField({ nullable: true })
  domain?: string;
}

@TypeGraphQLInputType()
export class PublicConfigUpdateInput {
  @TypeGraphQLField({ nullable: true })
  ipv4?: string;

  @TypeGraphQLField({ nullable: true })
  ipv6?: string;

  @TypeGraphQLField({ nullable: true })
  gw4?: string;

  @TypeGraphQLField({ nullable: true })
  gw6?: string;

  @TypeGraphQLField({ nullable: true })
  domain?: string;
}

@ArgsType()
export class PublicConfigWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PublicConfigWhereInput, { nullable: true })
  where?: PublicConfigWhereInput;

  @TypeGraphQLField(() => PublicConfigOrderByEnum, { nullable: true })
  orderBy?: PublicConfigOrderByEnum[];
}

@ArgsType()
export class PublicConfigCreateManyArgs {
  @TypeGraphQLField(() => [PublicConfigCreateInput])
  data!: PublicConfigCreateInput[];
}

@ArgsType()
export class PublicConfigUpdateArgs {
  @TypeGraphQLField() data!: PublicConfigUpdateInput;
  @TypeGraphQLField() where!: PublicConfigWhereUniqueInput;
}

export enum NodeOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  nodeId_ASC = "nodeId_ASC",
  nodeId_DESC = "nodeId_DESC",

  farmId_ASC = "farmId_ASC",
  farmId_DESC = "farmId_DESC",

  twinId_ASC = "twinId_ASC",
  twinId_DESC = "twinId_DESC",

  location_ASC = "location_ASC",
  location_DESC = "location_DESC",

  country_ASC = "country_ASC",
  country_DESC = "country_DESC",

  city_ASC = "city_ASC",
  city_DESC = "city_DESC",

  hru_ASC = "hru_ASC",
  hru_DESC = "hru_DESC",

  sru_ASC = "sru_ASC",
  sru_DESC = "sru_DESC",

  cru_ASC = "cru_ASC",
  cru_DESC = "cru_DESC",

  mru_ASC = "mru_ASC",
  mru_DESC = "mru_DESC",

  uptime_ASC = "uptime_ASC",
  uptime_DESC = "uptime_DESC",

  created_ASC = "created_ASC",
  created_DESC = "created_DESC",

  farmingPolicyId_ASC = "farmingPolicyId_ASC",
  farmingPolicyId_DESC = "farmingPolicyId_DESC",

  certificationType_ASC = "certificationType_ASC",
  certificationType_DESC = "certificationType_DESC",
}

registerEnumType(NodeOrderByEnum, {
  name: "NodeOrderByInput",
});

@TypeGraphQLInputType()
export class NodeWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  nodeId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  farmId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  twinId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  country_eq?: string;

  @TypeGraphQLField({ nullable: true })
  country_contains?: string;

  @TypeGraphQLField({ nullable: true })
  country_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  country_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  country_in?: string[];

  @TypeGraphQLField({ nullable: true })
  city_eq?: string;

  @TypeGraphQLField({ nullable: true })
  city_contains?: string;

  @TypeGraphQLField({ nullable: true })
  city_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  city_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  city_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  hru_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  hru_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  sru_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  sru_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  cru_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  cru_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  mru_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  mru_in?: string[];

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  publicConfig_json?: JsonObject;

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  uptime_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  created_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  created_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  created_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  created_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  created_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  created_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  farmingPolicyId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  farmingPolicyId_in?: number[];

  @TypeGraphQLField(() => CertificationType, { nullable: true })
  certificationType_eq?: CertificationType;

  @TypeGraphQLField(() => [CertificationType], { nullable: true })
  certificationType_in?: CertificationType[];

  @TypeGraphQLField(() => LocationWhereInput, { nullable: true })
  location?: LocationWhereInput;

  @TypeGraphQLField(() => InterfacesWhereInput, { nullable: true })
  interfaces_none?: InterfacesWhereInput;

  @TypeGraphQLField(() => InterfacesWhereInput, { nullable: true })
  interfaces_some?: InterfacesWhereInput;

  @TypeGraphQLField(() => InterfacesWhereInput, { nullable: true })
  interfaces_every?: InterfacesWhereInput;

  @TypeGraphQLField(() => NodeWhereInput, { nullable: true })
  AND?: [NodeWhereInput];

  @TypeGraphQLField(() => NodeWhereInput, { nullable: true })
  OR?: [NodeWhereInput];
}

@TypeGraphQLInputType()
export class NodeWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class NodeCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  nodeId!: number;

  @TypeGraphQLField()
  farmId!: number;

  @TypeGraphQLField()
  twinId!: number;

  @TypeGraphQLField(() => ID)
  location!: string;

  @TypeGraphQLField({ nullable: true })
  country?: string;

  @TypeGraphQLField({ nullable: true })
  city?: string;

  @TypeGraphQLField({ nullable: true })
  hru?: string;

  @TypeGraphQLField({ nullable: true })
  sru?: string;

  @TypeGraphQLField({ nullable: true })
  cru?: string;

  @TypeGraphQLField({ nullable: true })
  mru?: string;

  @TypeGraphQLField(() => PublicConfig, { nullable: true })
  publicConfig?: PublicConfig;

  @TypeGraphQLField({ nullable: true })
  uptime?: number;

  @TypeGraphQLField()
  created!: number;

  @TypeGraphQLField()
  farmingPolicyId!: number;

  @TypeGraphQLField(() => CertificationType)
  certificationType!: CertificationType;
}

@TypeGraphQLInputType()
export class NodeUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  nodeId?: number;

  @TypeGraphQLField({ nullable: true })
  farmId?: number;

  @TypeGraphQLField({ nullable: true })
  twinId?: number;

  @TypeGraphQLField(() => ID, { nullable: true })
  location?: string;

  @TypeGraphQLField({ nullable: true })
  country?: string;

  @TypeGraphQLField({ nullable: true })
  city?: string;

  @TypeGraphQLField({ nullable: true })
  hru?: string;

  @TypeGraphQLField({ nullable: true })
  sru?: string;

  @TypeGraphQLField({ nullable: true })
  cru?: string;

  @TypeGraphQLField({ nullable: true })
  mru?: string;

  @TypeGraphQLField(() => PublicConfig, { nullable: true })
  publicConfig?: PublicConfig;

  @TypeGraphQLField({ nullable: true })
  uptime?: number;

  @TypeGraphQLField({ nullable: true })
  created?: number;

  @TypeGraphQLField({ nullable: true })
  farmingPolicyId?: number;

  @TypeGraphQLField(() => CertificationType, { nullable: true })
  certificationType?: CertificationType;
}

@ArgsType()
export class NodeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => NodeWhereInput, { nullable: true })
  where?: NodeWhereInput;

  @TypeGraphQLField(() => NodeOrderByEnum, { nullable: true })
  orderBy?: NodeOrderByEnum[];
}

@ArgsType()
export class NodeCreateManyArgs {
  @TypeGraphQLField(() => [NodeCreateInput])
  data!: NodeCreateInput[];
}

@ArgsType()
export class NodeUpdateArgs {
  @TypeGraphQLField() data!: NodeUpdateInput;
  @TypeGraphQLField() where!: NodeWhereUniqueInput;
}

export enum InterfacesOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  node_ASC = "node_ASC",
  node_DESC = "node_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  mac_ASC = "mac_ASC",
  mac_DESC = "mac_DESC",

  ips_ASC = "ips_ASC",
  ips_DESC = "ips_DESC",
}

registerEnumType(InterfacesOrderByEnum, {
  name: "InterfacesOrderByInput",
});

@TypeGraphQLInputType()
export class InterfacesWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  mac_eq?: string;

  @TypeGraphQLField({ nullable: true })
  mac_contains?: string;

  @TypeGraphQLField({ nullable: true })
  mac_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  mac_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  mac_in?: string[];

  @TypeGraphQLField({ nullable: true })
  ips_eq?: string;

  @TypeGraphQLField({ nullable: true })
  ips_contains?: string;

  @TypeGraphQLField({ nullable: true })
  ips_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  ips_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ips_in?: string[];

  @TypeGraphQLField(() => NodeWhereInput, { nullable: true })
  node?: NodeWhereInput;

  @TypeGraphQLField(() => InterfacesWhereInput, { nullable: true })
  AND?: [InterfacesWhereInput];

  @TypeGraphQLField(() => InterfacesWhereInput, { nullable: true })
  OR?: [InterfacesWhereInput];
}

@TypeGraphQLInputType()
export class InterfacesWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class InterfacesCreateInput {
  @TypeGraphQLField(() => ID)
  node!: string;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  mac!: string;

  @TypeGraphQLField()
  ips!: string;
}

@TypeGraphQLInputType()
export class InterfacesUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  node?: string;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  mac?: string;

  @TypeGraphQLField({ nullable: true })
  ips?: string;
}

@ArgsType()
export class InterfacesWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => InterfacesWhereInput, { nullable: true })
  where?: InterfacesWhereInput;

  @TypeGraphQLField(() => InterfacesOrderByEnum, { nullable: true })
  orderBy?: InterfacesOrderByEnum[];
}

@ArgsType()
export class InterfacesCreateManyArgs {
  @TypeGraphQLField(() => [InterfacesCreateInput])
  data!: InterfacesCreateInput[];
}

@ArgsType()
export class InterfacesUpdateArgs {
  @TypeGraphQLField() data!: InterfacesUpdateInput;
  @TypeGraphQLField() where!: InterfacesWhereUniqueInput;
}

export enum MintTransactionOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  amount_ASC = "amount_ASC",
  amount_DESC = "amount_DESC",

  target_ASC = "target_ASC",
  target_DESC = "target_DESC",

  block_ASC = "block_ASC",
  block_DESC = "block_DESC",
}

registerEnumType(MintTransactionOrderByEnum, {
  name: "MintTransactionOrderByInput",
});

@TypeGraphQLInputType()
export class MintTransactionWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amount_in?: string[];

  @TypeGraphQLField({ nullable: true })
  target_eq?: string;

  @TypeGraphQLField({ nullable: true })
  target_contains?: string;

  @TypeGraphQLField({ nullable: true })
  target_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  target_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  target_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  block_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  block_in?: number[];

  @TypeGraphQLField(() => MintTransactionWhereInput, { nullable: true })
  AND?: [MintTransactionWhereInput];

  @TypeGraphQLField(() => MintTransactionWhereInput, { nullable: true })
  OR?: [MintTransactionWhereInput];
}

@TypeGraphQLInputType()
export class MintTransactionWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class MintTransactionCreateInput {
  @TypeGraphQLField()
  amount!: string;

  @TypeGraphQLField()
  target!: string;

  @TypeGraphQLField()
  block!: number;
}

@TypeGraphQLInputType()
export class MintTransactionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  amount?: string;

  @TypeGraphQLField({ nullable: true })
  target?: string;

  @TypeGraphQLField({ nullable: true })
  block?: number;
}

@ArgsType()
export class MintTransactionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => MintTransactionWhereInput, { nullable: true })
  where?: MintTransactionWhereInput;

  @TypeGraphQLField(() => MintTransactionOrderByEnum, { nullable: true })
  orderBy?: MintTransactionOrderByEnum[];
}

@ArgsType()
export class MintTransactionCreateManyArgs {
  @TypeGraphQLField(() => [MintTransactionCreateInput])
  data!: MintTransactionCreateInput[];
}

@ArgsType()
export class MintTransactionUpdateArgs {
  @TypeGraphQLField() data!: MintTransactionUpdateInput;
  @TypeGraphQLField() where!: MintTransactionWhereUniqueInput;
}

export enum NameContractOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  version_ASC = "version_ASC",
  version_DESC = "version_DESC",

  contractId_ASC = "contractId_ASC",
  contractId_DESC = "contractId_DESC",

  twinId_ASC = "twinId_ASC",
  twinId_DESC = "twinId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  state_ASC = "state_ASC",
  state_DESC = "state_DESC",
}

registerEnumType(NameContractOrderByEnum, {
  name: "NameContractOrderByInput",
});

@TypeGraphQLInputType()
export class NameContractWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  version_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  version_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  version_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  version_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  version_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  version_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  contractId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  twinId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField(() => ContractState, { nullable: true })
  state_eq?: ContractState;

  @TypeGraphQLField(() => [ContractState], { nullable: true })
  state_in?: ContractState[];

  @TypeGraphQLField(() => NameContractWhereInput, { nullable: true })
  AND?: [NameContractWhereInput];

  @TypeGraphQLField(() => NameContractWhereInput, { nullable: true })
  OR?: [NameContractWhereInput];
}

@TypeGraphQLInputType()
export class NameContractWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class NameContractCreateInput {
  @TypeGraphQLField()
  version!: number;

  @TypeGraphQLField()
  contractId!: number;

  @TypeGraphQLField()
  twinId!: number;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField(() => ContractState)
  state!: ContractState;
}

@TypeGraphQLInputType()
export class NameContractUpdateInput {
  @TypeGraphQLField({ nullable: true })
  version?: number;

  @TypeGraphQLField({ nullable: true })
  contractId?: number;

  @TypeGraphQLField({ nullable: true })
  twinId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField(() => ContractState, { nullable: true })
  state?: ContractState;
}

@ArgsType()
export class NameContractWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => NameContractWhereInput, { nullable: true })
  where?: NameContractWhereInput;

  @TypeGraphQLField(() => NameContractOrderByEnum, { nullable: true })
  orderBy?: NameContractOrderByEnum[];
}

@ArgsType()
export class NameContractCreateManyArgs {
  @TypeGraphQLField(() => [NameContractCreateInput])
  data!: NameContractCreateInput[];
}

@ArgsType()
export class NameContractUpdateArgs {
  @TypeGraphQLField() data!: NameContractUpdateInput;
  @TypeGraphQLField() where!: NameContractWhereUniqueInput;
}

export enum NodeContractOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  version_ASC = "version_ASC",
  version_DESC = "version_DESC",

  contractId_ASC = "contractId_ASC",
  contractId_DESC = "contractId_DESC",

  twinId_ASC = "twinId_ASC",
  twinId_DESC = "twinId_DESC",

  nodeId_ASC = "nodeId_ASC",
  nodeId_DESC = "nodeId_DESC",

  deploymentData_ASC = "deploymentData_ASC",
  deploymentData_DESC = "deploymentData_DESC",

  deploymentHash_ASC = "deploymentHash_ASC",
  deploymentHash_DESC = "deploymentHash_DESC",

  numberOfPublicIPs_ASC = "numberOfPublicIPs_ASC",
  numberOfPublicIPs_DESC = "numberOfPublicIPs_DESC",

  state_ASC = "state_ASC",
  state_DESC = "state_DESC",
}

registerEnumType(NodeContractOrderByEnum, {
  name: "NodeContractOrderByInput",
});

@TypeGraphQLInputType()
export class NodeContractWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  version_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  version_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  version_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  version_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  version_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  version_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  contractId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  contractId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  twinId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  twinId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  nodeId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  deploymentData_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deploymentData_contains?: string;

  @TypeGraphQLField({ nullable: true })
  deploymentData_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  deploymentData_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  deploymentData_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deploymentHash_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deploymentHash_contains?: string;

  @TypeGraphQLField({ nullable: true })
  deploymentHash_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  deploymentHash_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  deploymentHash_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  numberOfPublicIPs_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  numberOfPublicIPs_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  numberOfPublicIPs_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  numberOfPublicIPs_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  numberOfPublicIPs_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  numberOfPublicIPs_in?: number[];

  @TypeGraphQLField(() => ContractState, { nullable: true })
  state_eq?: ContractState;

  @TypeGraphQLField(() => [ContractState], { nullable: true })
  state_in?: ContractState[];

  @TypeGraphQLField(() => NodeContractWhereInput, { nullable: true })
  AND?: [NodeContractWhereInput];

  @TypeGraphQLField(() => NodeContractWhereInput, { nullable: true })
  OR?: [NodeContractWhereInput];
}

@TypeGraphQLInputType()
export class NodeContractWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class NodeContractCreateInput {
  @TypeGraphQLField()
  version!: number;

  @TypeGraphQLField()
  contractId!: number;

  @TypeGraphQLField()
  twinId!: number;

  @TypeGraphQLField()
  nodeId!: number;

  @TypeGraphQLField()
  deploymentData!: string;

  @TypeGraphQLField()
  deploymentHash!: string;

  @TypeGraphQLField()
  numberOfPublicIPs!: number;

  @TypeGraphQLField(() => ContractState)
  state!: ContractState;
}

@TypeGraphQLInputType()
export class NodeContractUpdateInput {
  @TypeGraphQLField({ nullable: true })
  version?: number;

  @TypeGraphQLField({ nullable: true })
  contractId?: number;

  @TypeGraphQLField({ nullable: true })
  twinId?: number;

  @TypeGraphQLField({ nullable: true })
  nodeId?: number;

  @TypeGraphQLField({ nullable: true })
  deploymentData?: string;

  @TypeGraphQLField({ nullable: true })
  deploymentHash?: string;

  @TypeGraphQLField({ nullable: true })
  numberOfPublicIPs?: number;

  @TypeGraphQLField(() => ContractState, { nullable: true })
  state?: ContractState;
}

@ArgsType()
export class NodeContractWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => NodeContractWhereInput, { nullable: true })
  where?: NodeContractWhereInput;

  @TypeGraphQLField(() => NodeContractOrderByEnum, { nullable: true })
  orderBy?: NodeContractOrderByEnum[];
}

@ArgsType()
export class NodeContractCreateManyArgs {
  @TypeGraphQLField(() => [NodeContractCreateInput])
  data!: NodeContractCreateInput[];
}

@ArgsType()
export class NodeContractUpdateArgs {
  @TypeGraphQLField() data!: NodeContractUpdateInput;
  @TypeGraphQLField() where!: NodeContractWhereUniqueInput;
}

export enum PricingPolicyOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  gridVersion_ASC = "gridVersion_ASC",
  gridVersion_DESC = "gridVersion_DESC",

  pricingPolicyId_ASC = "pricingPolicyId_ASC",
  pricingPolicyId_DESC = "pricingPolicyId_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  foundationAccount_ASC = "foundationAccount_ASC",
  foundationAccount_DESC = "foundationAccount_DESC",

  certifiedSalesAccount_ASC = "certifiedSalesAccount_ASC",
  certifiedSalesAccount_DESC = "certifiedSalesAccount_DESC",
}

registerEnumType(PricingPolicyOrderByEnum, {
  name: "PricingPolicyOrderByInput",
});

@TypeGraphQLInputType()
export class PricingPolicyWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  gridVersion_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  gridVersion_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  pricingPolicyId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  pricingPolicyId_in?: number[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  su_json?: JsonObject;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  cu_json?: JsonObject;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  nu_json?: JsonObject;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  ipu_json?: JsonObject;

  @TypeGraphQLField({ nullable: true })
  foundationAccount_eq?: string;

  @TypeGraphQLField({ nullable: true })
  foundationAccount_contains?: string;

  @TypeGraphQLField({ nullable: true })
  foundationAccount_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  foundationAccount_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  foundationAccount_in?: string[];

  @TypeGraphQLField({ nullable: true })
  certifiedSalesAccount_eq?: string;

  @TypeGraphQLField({ nullable: true })
  certifiedSalesAccount_contains?: string;

  @TypeGraphQLField({ nullable: true })
  certifiedSalesAccount_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  certifiedSalesAccount_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  certifiedSalesAccount_in?: string[];

  @TypeGraphQLField(() => PricingPolicyWhereInput, { nullable: true })
  AND?: [PricingPolicyWhereInput];

  @TypeGraphQLField(() => PricingPolicyWhereInput, { nullable: true })
  OR?: [PricingPolicyWhereInput];
}

@TypeGraphQLInputType()
export class PricingPolicyWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PricingPolicyCreateInput {
  @TypeGraphQLField()
  gridVersion!: number;

  @TypeGraphQLField()
  pricingPolicyId!: number;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField(() => Policy)
  su!: Policy;

  @TypeGraphQLField(() => Policy)
  cu!: Policy;

  @TypeGraphQLField(() => Policy)
  nu!: Policy;

  @TypeGraphQLField(() => Policy)
  ipu!: Policy;

  @TypeGraphQLField()
  foundationAccount!: string;

  @TypeGraphQLField()
  certifiedSalesAccount!: string;
}

@TypeGraphQLInputType()
export class PricingPolicyUpdateInput {
  @TypeGraphQLField({ nullable: true })
  gridVersion?: number;

  @TypeGraphQLField({ nullable: true })
  pricingPolicyId?: number;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField(() => Policy, { nullable: true })
  su?: Policy;

  @TypeGraphQLField(() => Policy, { nullable: true })
  cu?: Policy;

  @TypeGraphQLField(() => Policy, { nullable: true })
  nu?: Policy;

  @TypeGraphQLField(() => Policy, { nullable: true })
  ipu?: Policy;

  @TypeGraphQLField({ nullable: true })
  foundationAccount?: string;

  @TypeGraphQLField({ nullable: true })
  certifiedSalesAccount?: string;
}

@ArgsType()
export class PricingPolicyWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PricingPolicyWhereInput, { nullable: true })
  where?: PricingPolicyWhereInput;

  @TypeGraphQLField(() => PricingPolicyOrderByEnum, { nullable: true })
  orderBy?: PricingPolicyOrderByEnum[];
}

@ArgsType()
export class PricingPolicyCreateManyArgs {
  @TypeGraphQLField(() => [PricingPolicyCreateInput])
  data!: PricingPolicyCreateInput[];
}

@ArgsType()
export class PricingPolicyUpdateArgs {
  @TypeGraphQLField() data!: PricingPolicyUpdateInput;
  @TypeGraphQLField() where!: PricingPolicyWhereUniqueInput;
}

export enum RefundTransactionOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  block_ASC = "block_ASC",
  block_DESC = "block_DESC",

  amount_ASC = "amount_ASC",
  amount_DESC = "amount_DESC",

  target_ASC = "target_ASC",
  target_DESC = "target_DESC",

  txHash_ASC = "txHash_ASC",
  txHash_DESC = "txHash_DESC",
}

registerEnumType(RefundTransactionOrderByEnum, {
  name: "RefundTransactionOrderByInput",
});

@TypeGraphQLInputType()
export class RefundTransactionWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  block_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  block_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  block_in?: number[];

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_eq?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_gte?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lt?: string;

  @TypeGraphQLField(() => BigInt, { nullable: true })
  amount_lte?: string;

  @TypeGraphQLField(() => [BigInt], { nullable: true })
  amount_in?: string[];

  @TypeGraphQLField({ nullable: true })
  target_eq?: string;

  @TypeGraphQLField({ nullable: true })
  target_contains?: string;

  @TypeGraphQLField({ nullable: true })
  target_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  target_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  target_in?: string[];

  @TypeGraphQLField({ nullable: true })
  txHash_eq?: string;

  @TypeGraphQLField({ nullable: true })
  txHash_contains?: string;

  @TypeGraphQLField({ nullable: true })
  txHash_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  txHash_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  txHash_in?: string[];

  @TypeGraphQLField(() => RefundTransactionWhereInput, { nullable: true })
  AND?: [RefundTransactionWhereInput];

  @TypeGraphQLField(() => RefundTransactionWhereInput, { nullable: true })
  OR?: [RefundTransactionWhereInput];
}

@TypeGraphQLInputType()
export class RefundTransactionWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class RefundTransactionCreateInput {
  @TypeGraphQLField()
  block!: number;

  @TypeGraphQLField()
  amount!: string;

  @TypeGraphQLField()
  target!: string;

  @TypeGraphQLField()
  txHash!: string;
}

@TypeGraphQLInputType()
export class RefundTransactionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  block?: number;

  @TypeGraphQLField({ nullable: true })
  amount?: string;

  @TypeGraphQLField({ nullable: true })
  target?: string;

  @TypeGraphQLField({ nullable: true })
  txHash?: string;
}

@ArgsType()
export class RefundTransactionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => RefundTransactionWhereInput, { nullable: true })
  where?: RefundTransactionWhereInput;

  @TypeGraphQLField(() => RefundTransactionOrderByEnum, { nullable: true })
  orderBy?: RefundTransactionOrderByEnum[];
}

@ArgsType()
export class RefundTransactionCreateManyArgs {
  @TypeGraphQLField(() => [RefundTransactionCreateInput])
  data!: RefundTransactionCreateInput[];
}

@ArgsType()
export class RefundTransactionUpdateArgs {
  @TypeGraphQLField() data!: RefundTransactionUpdateInput;
  @TypeGraphQLField() where!: RefundTransactionWhereUniqueInput;
}

export enum UptimeEventOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  nodeId_ASC = "nodeId_ASC",
  nodeId_DESC = "nodeId_DESC",

  uptime_ASC = "uptime_ASC",
  uptime_DESC = "uptime_DESC",

  timestamp_ASC = "timestamp_ASC",
  timestamp_DESC = "timestamp_DESC",
}

registerEnumType(UptimeEventOrderByEnum, {
  name: "UptimeEventOrderByInput",
});

@TypeGraphQLInputType()
export class UptimeEventWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  nodeId_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  nodeId_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  uptime_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  uptime_in?: number[];

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_eq?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_gt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_gte?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_lt?: number;

  @TypeGraphQLField(() => Int, { nullable: true })
  timestamp_lte?: number;

  @TypeGraphQLField(() => [Int], { nullable: true })
  timestamp_in?: number[];

  @TypeGraphQLField(() => UptimeEventWhereInput, { nullable: true })
  AND?: [UptimeEventWhereInput];

  @TypeGraphQLField(() => UptimeEventWhereInput, { nullable: true })
  OR?: [UptimeEventWhereInput];
}

@TypeGraphQLInputType()
export class UptimeEventWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class UptimeEventCreateInput {
  @TypeGraphQLField()
  nodeId!: number;

  @TypeGraphQLField()
  uptime!: number;

  @TypeGraphQLField()
  timestamp!: number;
}

@TypeGraphQLInputType()
export class UptimeEventUpdateInput {
  @TypeGraphQLField({ nullable: true })
  nodeId?: number;

  @TypeGraphQLField({ nullable: true })
  uptime?: number;

  @TypeGraphQLField({ nullable: true })
  timestamp?: number;
}

@ArgsType()
export class UptimeEventWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UptimeEventWhereInput, { nullable: true })
  where?: UptimeEventWhereInput;

  @TypeGraphQLField(() => UptimeEventOrderByEnum, { nullable: true })
  orderBy?: UptimeEventOrderByEnum[];
}

@ArgsType()
export class UptimeEventCreateManyArgs {
  @TypeGraphQLField(() => [UptimeEventCreateInput])
  data!: UptimeEventCreateInput[];
}

@ArgsType()
export class UptimeEventUpdateArgs {
  @TypeGraphQLField() data!: UptimeEventUpdateInput;
  @TypeGraphQLField() where!: UptimeEventWhereUniqueInput;
}
