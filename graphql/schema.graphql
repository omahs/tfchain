type Account @entity {
  "Account address"
  id: ID!
  wallet: String!
  balance: BigInt!
  historicalBalances: [HistoricalBalance!] @derivedFrom(field: "account")
}

type HistoricalBalance @entity {
  id: ID!
  account: Account!
  balance: BigInt!
  timestamp: BigInt!
}

type Entity @entity {
  gridVersion: Int!
  entityID: Int!
  name: String!
  country: String
  city: String
  accountID: String!
}

type Twin @entity {
  gridVersion: Int!
  twinID: Int!
  accountID: String!
  ip: String!
}

type EntityProof @entity {
  entityID: Int!
  signature: String!
  twinRel: Twin!
}

type Farm @entity {
  gridVersion: Int!
  farmID: Int!
  name: String!
  twinID: Int!
  pricingPolicyID: Int!
  certificationType: CertificationType!
  publicIPs: [PublicIp!] @derivedFrom(field: "farm")
  stellarAddress: String
}

type PublicIp @entity {
  farm: Farm!
  gateway: String!
  ip: String!
  contract_id: Int!
}

type Node @entity {
  gridVersion: Int!
  nodeID: Int!
  farmID: Int!
  twinID: Int!
  location: Location!
  country: String
  city: String
  hru: BigInt
  sru: BigInt
  cru: BigInt
  mru: BigInt
  publicConfig: PublicConfig
  uptime: Int
  created: Int!
  farming_policy_id: Int!
  interfaces: [Interfaces!] @derivedFrom(field: "node")
  certificationType: CertificationType!
}

type Interfaces @entity {
  node: Node!
  name: String!
  mac: String!
  ips: String!
}

enum CertificationType {
  Diy
  Certified
}

type PublicConfig @jsonField {
  ipv4: String
  ipv6: String
  gw4: String
  gw6: String
  domain: String
}

type Location @entity {
  longitude: String!
  latitude: String!
}

type PricingPolicy @entity {
  gridVersion: Int!
  pricingPolicyID: Int!
  name: String!
  su: Policy!
  cu: Policy!
  nu: Policy!
  ipu: Policy!
  foundation_account: String!
  certified_sales_account: String!
}

type Policy @jsonField {
  value: Int
  unit: String
}

type Country @entity {
  countryID: Int!
  code: String!
  name: String!
  region: String!
  subregion: String!
  lat: String
  long: String
}

type City @entity {
  cityID: Int!
  countryID: Int!
  name: String!
}

type NodeContract @entity {
  version: Int!
  contractID: Int!
  twinID: Int!
  nodeID: Int!
  deployment_data: String!
  deployment_hash: String!
  numberOfPublicIPs: Int!
  state: ContractState!
}

type NameContract @entity {
  version: Int!
  contractID: Int!
  twinID: Int!
  name: String!
  state: ContractState!
}

enum ContractState {
  Created,
  Deleted,
  OutOfFunds
}

type Consumption @entity {
  contractID: Int!
  timestamp: Int!
  cru: BigInt
  sru: BigInt
  hru: BigInt
  mru: BigInt
  nru: BigInt
}

type ContractBillReport @entity {
  contractID: Int!
  discount_received: DiscountLevel!
  amount_billed: BigInt!
  timestamp: Int!
}

enum DiscountLevel {
  None,
  Default,
  Bronze,
  Silver,
  Gold
}

type FarmingPolicy @entity {
  gridVersion: Int!
  farmingPolicyID: Int!
  name: String!
  cu: Int!
  su: Int!
  nu: Int!
  ipv4: Int!
  timestamp: Int!
  certification_type: CertificationType!
}

type UptimeEvent @entity {
  nodeID: Int!
  uptime: Int!
  timestamp: Int!
}

type MintTransaction @entity {
  amount: BigInt!
  target: String!
  block: Int! 
}

type BurnTransaction @entity {
  block: Int!
  amount: BigInt!
  target: String!
}

type RefundTransaction @entity {
  block: Int!
  amount: BigInt!
  target: String!
  txHash: String!
}